" plugins
call plug#begin()

Plug 'morhetz/gruvbox' " color scheme
Plug 'srcery-colors/srcery-vim' " color scheme
Plug 'ap/vim-css-color' " preview css color
Plug 'xolox/vim-misc' " dependency of coloscheme to test
Plug 'xolox/vim-colorscheme-switcher' " switch coloscheme to test
Plug 'terryma/vim-multiple-cursors' "<C-n> to replace all selected ocurr
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " fzf finder
Plug 'junegunn/fzf.vim' " fzf finder
Plug 'Chiel92/vim-autoformat' " autoformat file on save
Plug 'preservim/nerdtree' |
            \ Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'dense-analysis/ale', { 'do': 'pip install flake8 isort yapf' } " Asynchronous Lint Engine - lint checker
Plug 'SirVer/ultisnips' " snippet code
Plug 'honza/vim-snippets' " dependency of ultisnips
Plug 'vim-airline/vim-airline' " status bar
Plug 'vim-airline/vim-airline-themes' " status theme
Plug 'neoclide/coc.nvim', {'branch': 'release'} " completion - make vim as smart as vscode
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' } " golang features like :GoBuild and more
Plug 'sheerun/vim-polyglot' " pack of languages syntaxes and more (this must be after vim-go to work)
Plug 'tikhomirov/vim-glsl' " Vim syntax highlighting for OpenGL Shading Language

"Plug 'ncm2/ncm2' " nvim completion manager
"Plug 'roxma/nvim-yarp'
"Plug 'ncm2/ncm2-bufword'
"Plug 'ncm2/ncm2-tmux'
"Plug 'ncm2/ncm2-path'
"Plug 'ncm2/ncm2-tern', { 'do': 'npm install' } " javascript completion (need to install node)

Plug 'benmills/vimux' " VimuxRunCommand(\"ls\") run command another pane tmux
"
"Plug 'dart-lang/dart-vim-plugin' " for flutter
"Plug 'thosakwe/vim-flutter' " for flutter
"Plug 'natebosch/dartlang-snippets'
"Plug 'natebosch/vim-lsc'
"Plug 'natebosch/vim-lsc-dart'
"Plug 'iamcco/coc-flutter'
"
if has('nvim') " async frameworks completion
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
endif

call plug#end()


" default
syntax on
filetype plugin indent on

"set t_Co=256
set background=dark
" set background=dark termguicolors cursorline
set encoding=utf8
set hidden
set nobackup
set nowritebackup
set number
set relativenumber
set mouse=c
set shiftwidth=2
set tabstop=2
set expandtab
set noswapfile
set cursorline
set lazyredraw
let mapleader="\<Space>"
set laststatus=2
set colorcolumn=100
highlight ColorColumn ctermbg=0 guibg=lightgrey
set rtp+=/usr/share/powerline/bindings/vim/
set wildignore+=*.pyc,__pycache__,*.o,*.obj,*.svn,*.swp,*.class,*.hg,*.DS_Store,*.min.*

colorscheme srcery
hi Comment ctermfg=Red
set fillchars=vert:\â”‚
autocmd ColorScheme * highlight VertSplit cterm=NONE ctermfg=Black ctermbg=NONE


" activated transparent background for alacritty
hi! Normal guibg=NONE ctermbg=NONE
hi! NonText guibg=NONE ctermbg=NONE
hi! Comment ctermfg=78 " green

" remaps

" flutter stuff
" nnoremap <leader>fa :FlutterRun<cr>
" nnoremap <leader>fq :FlutterQuit<cr>
" nnoremap <leader>fr :FlutterHotReload<cr>
" nnoremap <leader>fR :FlutterHotRestart<cr>
" nnoremap <leader>fD :FlutterVisualDebug<cr>

" gui stuff
nnoremap <leader>; A;<esc>
nnoremap <leader><F1> :mksession!<cr>
nnoremap <leader><F10> :e ~/.vimrc<cr>
nnoremap <leader><F12> :source %<cr>
nnoremap <leader>f :Files<cr>
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>s :Ag<space>
nnoremap <leader>k :bd<cr>
nnoremap <leader><TAB> :NERDTreeToggle<cr>
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-S-j> <C-e>
nnoremap <C-S-k> <C-y>
"nnoremap <F5> :call VimuxRunCommand("nodemon inspect index.js")<cr>
nnoremap <leader>qw :call VimuxRunCommand("clear; echo \"Start compiling...\"; ./build.sh")<cr>

" Chiel92/vim-autoformat
noremap <leader>l :Autoformat<cr>
au BufWrite * :Autoformat " auto format when save file
au BufRead,BufNewFile *.mm set filetype=objc


" coc
inoremap <silent><expr> <C-j>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<C-j>" :
      \ coc#refresh()
inoremap <expr><C-k> pumvisible() ? "\<C-p>" : "\<C-h>"

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" ncm2 configs
"inoremap <c-c> <ESC>
"inoremap <expr> <tab> pumvisible() ? "\<c-n>" : "\<tab>"
"inoremap <expr> <S-Tab> (pumvisible() ? "\<C-p>" : "\<S-Tab>")

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" enable ncm2 for all buffers
"autocmd BufEnter * call ncm2#enable_for_buffer()
"set completeopt=noinsert,menuone,noselect


if !exists('g:airline_symbols') " incompatible powerline symbols for Inziu Iosevka font
    let g:airline_symbols = {}
endif

let $FZF_DEFAULT_COMMAND = 'ag --nocolor -g ""'
let NERDTreeRespectWildIgnore=1

let g:airline_theme='srcery'
let g:colorscheme_switcher_define_mappings = 1 " change colorscheme with F8 and SHIFT-F8
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_symbols.linenr = " " "font https://github.com/vim-airline/vim-airline/issues/1397
let g:airline_symbols.whitespace = " "
let g:airline#extensions#tabline#formatter = 'unique_tail'

let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#jedi#show_docstring = 1 " deoplete jedi (python)

let g:ale_python_flake8_executable = 'python3'   " or 'python' for Python 2
let g:ale_python_flake8_options = '-m flake8'
let g:ale_linters = {
            \   'javascript': ['eslint'],
            \   'python': ['flake8'],
            \}
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetsDir="~/.config/nvim/UltiSnips"

let g:autoformat_verbosemode = 0 " debug autoformat
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0
let g:formatdef_my_html_django = "'html-beautify'" " custom for django html (need nodejs)
let g:formatters_htmldjango = ['my_html_django']
let g:formatdef_astyle_cpp = '"astyle --mode=c --style=google --indent-switches -pcH".(&expandtab ? "s".shiftwidth() : "t")'
let g:lsc_server_commands = {'dart': 'dart_language_server'}
let g:VimuxOrientation = "h"
let g:VimuxHeight = "50"

" flutter stuff
let g:dart_style_guide = 2
let g:dart_format_on_save = 1
let g:lsc_auto_map = v:true

autocmd FileType vim,tex let b:autoformat_autoindent=0
autocmd FileType dart let b:deoplete_disable_auto_complete = 1
autocmd! BufNewFile,BufRead *.vs,*.fs,*.vert,*.frag set ft=glsl

let g:deoplete#disable_auto_complete = 1

let t:is_transparent = 1
function! Toggle_transparent()
    if t:is_transparent == 0
        hi! Normal guibg=NONE ctermbg=NONE
        hi! NonText guibg=NONE ctermbg=NONE
        let t:is_transparent = 1
    else
        set background=dark
        let t:is_tranparent = 0
    endif
endfunction
nnoremap <C-t> : call Toggle_transparent()<CR>
