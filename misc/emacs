
;;; PRE-REQUIRMENTS!!!

; --- WINDOWS ---
; set variable environment HOME => c:\
; create a folder c:\.emacs.d\themes
; put c:\.emacs


; define variables
(setq taguiar-macos (eq system-type 'darwin))
(setq taguiar-linux (featurep 'x))
(setq taguiar-win32 (not (or taguiar-macos taguiar-linux)))
(setq backup-directory-alist `(("." . "~/.saves")))
(setq taguiar-unignored-buffers '("*scratch*" "*foo*" "*bar*"))

; init macosx
(when taguiar-macos
  (setq taguiar-todo-file "~/work/handmade/todo.txt")
  (setq taguiar-log-file "~/work/handmade/log.txt")
  (setq taguiar-theme-dir "~/.emacs.d/themes")
  (setq taguiar-emacs-file "~/.emacs")
  (split-window-horizontally))

; init windows
(when taguiar-win32
  (setq taguiar-makescript "build.bat")
  (setq taguiar-todo-file "w:/handmade/todo.txt")
  (setq taguiar-theme-dir "c:\\.emacs.d\\themes")
  (setq taguiar-emacs-file "c:\\.emacs")
  (set-face-attribute 'default nil :font "Liberation Mono" :height 120))


; BASICS
(setq inhibit-startup-message t
      initial-scratch-message nil
      auto-save-default nil
      evil-insert-state-cursor '(box "green")
      evil-normal-state-cursor '(box "purple")
      mouse-wheel-scroll-amount '(1)
      mouse-wheel-progressive-speed nil
      mac-command-modifier 'meta
)

(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
(blink-cursor-mode 0)
(show-paren-mode t)
(global-hl-line-mode 0)
(display-time)

(defalias 'yes-or-no-p 'y-or-n-p)
(add-hook 'emacs-startup-hook 'toggle-frame-maximized)

; Set up package.el to work with MELPA
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)

; Evil mode
(unless (package-installed-p 'evil)
  (package-refresh-contents)
  (package-install 'evil))

(require 'evil)
(evil-mode 1)


(require 'compile)
(require 'cc-mode) ; mode for editing files containing C, C++, Objective-C, Java
(require 'ido)     ; interactively 'DO things' for files and navigation
(ido-mode t)



; Themes
(add-to-list 'custom-theme-load-path (file-name-as-directory taguiar-theme-dir))
(load-theme 'taylor t t)
(enable-theme 'taylor)
(set-face-background 'hl-line "gray")
; (add-to-list 'default-frame-alist '(font . "Liberation Mono-11.5"))
; (set-face-attribute 'default t :font "Liberation Mono-11.5")
(set-face-attribute 'font-lock-builtin-face nil :foreground "#DAB98F")
; (set-face-attribute 'font-lock-comment-face nil :foreground "gray50")
(set-face-attribute 'font-lock-comment-face nil :foreground "green")
(set-face-attribute 'font-lock-constant-face nil :foreground "olive drab")
(set-face-attribute 'font-lock-doc-face nil :foreground "gray50")
(set-face-attribute 'font-lock-function-name-face nil :foreground "burlywood3")
(set-face-attribute 'font-lock-function-name-face nil :foreground "white")
; (set-face-attribute 'font-lock-keyword-face nil :foreground "DarkGoldenrod3")
; (set-face-attribute 'font-lock-string-face nil :foreground "olive drab")
(set-face-attribute 'font-lock-string-face nil :foreground "cyan")
; (set-face-attribute 'font-lock-type-face nil :foreground "burlywood3")
(set-face-attribute 'font-lock-variable-name-face nil :foreground "burlywood3")


;; Shortcuts
(global-set-key (kbd "<f10>") (lambda () (interactive)
				(find-file taguiar-emacs-file)
				(message "Opened: %s" (buffer-name))))

(global-set-key (kbd "<f12>") (lambda () (interactive)
				(eval-buffer)
				(message "Refresh: %s" (buffer-name))))

(define-key global-map "\ef" 'find-file)
(define-key global-map "\eF" 'find-file-other-window)
(global-set-key (read-kbd-macro "\eb")  'ido-switch-buffer)
(global-set-key (read-kbd-macro "\eB")  'ido-switch-buffer-other-window)

(define-key global-map "\et" 'load-todo)
(define-key global-map "\er" 'revert-buffer)
(define-key global-map "\ek" 'kill-this-buffer)
(define-key global-map "\es" 'save-buffer)
(define-key global-map "\eT" 'load-log)

; define functions
(defun test ()
  (message "after-init-hook called"))

(defun taguiar-ido-ignore-func (name)
  "Ignore all non-user (a.k.a. *starred*) buffers except those listed in variable `taguiar-unignored-buffers'."
  (and (string-match "^\*" name)
       (not (member name taguiar-unignored-buffers))))

(setq ido-ignore-buffers '("\\` " taguiar-ido-ignore-func))

(defun load-todo ()
  (interactive)
  (find-file taguiar-todo-file))


(add-hook 'after-init-hook 'test)

; Bright-red TODOs
(setq fixme-modes '(c++-mode c-mode emacs-lisp-mode))
(make-face 'font-lock-fixme-face)
(make-face 'font-lock-study-face)
(make-face 'font-lock-important-face)
(make-face 'font-lock-note-face)
(mapc (lambda (mode)
 (font-lock-add-keywords
  mode
  '(("\\<\\(TODO\\)" 1 'font-lock-fixme-face t)
    ("\\<\\(STUDY\\)" 1 'font-lock-study-face t)
    ("\\<\\(IMPORTANT\\)" 1 'font-lock-important-face t)
           ("\\<\\(NOTE\\)" 1 'font-lock-note-face t))))
fixme-modes)
(modify-face 'font-lock-fixme-face "Red" nil nil t nil t nil nil)
(modify-face 'font-lock-study-face "Blue" nil nil t nil t nil nil)
(modify-face 'font-lock-important-face "Yellow" nil nil t nil t nil nil)
(modify-face 'font-lock-note-face "Orange" nil nil t nil t nil nil)

; Accepted file extensions and their appropriate modes
(setq auto-mode-alist
      (append
       '(("\\.cpp$"    . c++-mode)
         ("\\.hin$"    . c++-mode)
         ("\\.cin$"    . c++-mode)
         ("\\.inl$"    . c++-mode)
         ("\\.rdc$"    . c++-mode)
         ("\\.h$"      . c++-mode)
         ("\\.c$"      . c++-mode)
         ("\\.cc$"     . c++-mode)
         ("\\.c8$"     . c++-mode)
         ("\\.txt$"    . indented-text-mode)
         ("\\.emacs$"  . emacs-lisp-mode)
         ("\\.gen$"    . gen-mode)
         ("\\.ms$"     . fundamental-mode)
         ("\\.m$"      . objc-mode)
         ("\\.mm$"     . objc-mode)
         ) auto-mode-alist))

; C++ indentation style
(defconst taguiar-big-fun-c-style
  '((c-electric-pound-behavior   . nil)
    (c-tab-always-indent         . t)
    (c-comment-only-line-offset  . 0)
    (c-hanging-braces-alist      . ((class-open)
                                    (class-close)
                                    (defun-open)
                                    (defun-close)
                                    (inline-open)
                                    (inline-close)
                                    (brace-list-open)
                                    (brace-list-close)
                                    (brace-list-intro)
                                    (brace-list-entry)
                                    (block-open)
                                    (block-close)
                                    (substatement-open)
                                    (statement-case-open)
                                    (class-open)))
    (c-hanging-colons-alist      . ((inher-intro)
                                    (case-label)
                                    (label)
                                    (access-label)
                                    (access-key)
                                    (member-init-intro)))
    (c-cleanup-list              . (scope-operator
                                    list-close-comma
                                    defun-close-semi))
    (c-offsets-alist             . ((arglist-close         .  c-lineup-arglist)
                                    (label                 . -4)
                                    (access-label          . -4)
                                    (substatement-open     .  0)
                                    (statement-case-intro  .  4)
                                    (statement-block-intro .  c-lineup-for)
                                    (case-label            .  4)
                                    (block-open            .  0)
                                    (inline-open           .  0)
                                    (topmost-intro-cont    .  0)
                                    (knr-argdecl-intro     . -4)
                                    (brace-list-open       .  0)
                                    (brace-list-intro      .  4)))
    (c-echo-syntactic-information-p . t))
    "Tiago's Big Fun C++ Style")


(defun insert-timeofday ()
   (interactive "*")
   (insert (format-time-string "---------------- %a, %d %b %y: %I:%M%p")))
(defun load-log ()
  (interactive)
  (find-file taguiar-log-file)
  (end-of-buffer)
  (newline-and-indent)
  (insert-timeofday)
  (newline-and-indent)
  (newline-and-indent)
  (end-of-buffer)
)

; CC++ mode handling
(defun taguiar-big-fun-c-hook ()
  ; Set my style for the current buffer
  (c-add-style "BigFun" taguiar-big-fun-c-style t)

  ; 4-space tabs
  (setq tab-width 4
        indent-tabs-mode nil)

  ; Additional style stuff
  (c-set-offset 'member-init-intro '++)

  ; Handle super-tabbify (TAB completes, shift-TAB actually tabs)
  (setq dabbrev-case-replace t)
  (setq dabbrev-case-fold-search t)
  (setq dabbrev-upcase-means-case-search t)

  ; Abbrevation expansion
  (abbrev-mode 1)
 
  (defun taguiar-header-format ()
     "Format the given file as a header file."
     (interactive)
     (setq BaseFileName (file-name-sans-extension (file-name-nondirectory buffer-file-name)))
     (insert "#if !defined(")
     (push-mark)
     (insert BaseFileName)
     (upcase-region (mark) (point))
     (pop-mark)
     (insert "_H)\n")
     (insert "/* ========================================================================\n")
     (insert "   $File: $\n")
     (insert "   $Date: $\n")
     (insert "   $Revision: $\n")
     (insert "   $Creator: Tiago Aguiar $\n")
     (insert "   $Notice: (C) Copyright 2022 by AT Digital LTDA. All Rights Reserved. $\n")
     (insert "   ======================================================================== */\n")
     (insert "\n")
     (insert "#define ")
     (push-mark)
     (insert BaseFileName)
     (upcase-region (mark) (point))
     (pop-mark)
     (insert "_H\n")
     (insert "#endif")
  )

  (defun taguiar-source-format ()
     "Format the given file as a source file."
     (interactive)
     (setq BaseFileName (file-name-sans-extension (file-name-nondirectory buffer-file-name)))
     (insert "/* ========================================================================\n")
     (insert "   $File: $\n")
     (insert "   $Date: $\n")
     (insert "   $Revision: $\n")
     (insert "   $Creator: Tiago Aguiar $\n")
     (insert "   $Notice: (C) Copyright 2022 by AT Digital LTDA. All Rights Reserved. $\n")
     (insert "   ======================================================================== */\n")
  )

  (cond ((file-exists-p buffer-file-name) t)
        ((string-match "[.]hin" buffer-file-name) (taguiar-source-format))
        ((string-match "[.]cin" buffer-file-name) (taguiar-source-format))
        ((string-match "[.]h" buffer-file-name) (taguiar-header-format))
        ((string-match "[.]cpp" buffer-file-name) (taguiar-source-format)))

  (defun taguiar-find-corresponding-file ()
    "Find the file that corresponds to this one."
    (interactive)
    (setq CorrespondingFileName nil)
    (setq BaseFileName (file-name-sans-extension buffer-file-name))
    (if (string-match "\\.c" buffer-file-name)
       (setq CorrespondingFileName (concat BaseFileName ".h")))
    (if (string-match "\\.h" buffer-file-name)
       (if (file-exists-p (concat BaseFileName ".c")) (setq CorrespondingFileName (concat BaseFileName ".c"))
	   (setq CorrespondingFileName (concat BaseFileName ".cpp"))))
    (if (string-match "\\.hin" buffer-file-name)
       (setq CorrespondingFileName (concat BaseFileName ".cin")))
    (if (string-match "\\.cin" buffer-file-name)
       (setq CorrespondingFileName (concat BaseFileName ".hin")))
    (if (string-match "\\.cpp" buffer-file-name)
       (setq CorrespondingFileName (concat BaseFileName ".h")))
    (if CorrespondingFileName (find-file CorrespondingFileName)
       (error "Unable to find a corresponding file")))
  (defun taguiar-find-corresponding-file-other-window ()
    "Find the file that corresponds to this one."
    (interactive)
    (find-file-other-window buffer-file-name)
    (taguiar-find-corresponding-file)
    (other-window -1))


  (define-key c++-mode-map "\eo" 'taguiar-find-corresponding-file)
  (define-key c++-mode-map "\eO" 'taguiar-find-corresponding-file-other-window)
  (define-key c++-mode-map "\es" 'taguiar-save-buffer)
  (define-key c++-mode-map "\t" 'dabbrev-expand)
  (define-key c++-mode-map [S-tab] 'indent-for-tab-command)
  (define-key c++-mode-map "\C-y" 'indent-for-tab-command)
  (define-key c++-mode-map [C-tab] 'indent-region)
  (define-key c++-mode-map "	" 'indent-region)
  (define-key c++-mode-map "\ej" 'imenu)
  (define-key c++-mode-map "\e/" 'c-mark-function)

  ; devenv.com error parsing
  (add-to-list 'compilation-error-regexp-alist 'taguiar-devenv)
  (add-to-list 'compilation-error-regexp-alist-alist '(taguiar-devenv
   "*\\([0-9]+>\\)?\\(\\(?:[a-zA-Z]:\\)?[^:(\t\n]+\\)(\\([0-9]+\\)) : \\(?:see declaration\\|\\(?:warnin\\(g\\)\\|[a-z ]+\\) C[0-9]+:\\)"
    2 3 nil (4)))

  ; Turn off line numbers
  (linum-mode -1)
)


(add-hook 'c-mode-common-hook 'taguiar-big-fun-c-hook)

; Setup my compilation mode
(defun taguiar-big-fun-compilation-hook ()
  (make-local-variable 'truncate-lines)
  (setq truncate-lines nil)
)

(add-hook 'compilation-mode-hook 'taguiar-big-fun-compilation-hook)

(setq compilation-directory-locked nil)

; Compilation
(setq compilation-context-lines 0)
(setq compilation-error-regexp-alist
    (cons '("^\\([0-9]+>\\)?\\(\\(?:[a-zA-Z]:\\)?[^:(\t\n]+\\)(\\([0-9]+\\)) : \\(?:fatal error\\|warnin\\(g\\)\\) C[0-9]+:" 2 3 nil (4))
     compilation-error-regexp-alist))

(defun find-project-directory-recursive ()
  "Recursively search for a makefile."
  (interactive)
  (if (file-exists-p taguiar-makescript) t
      (cd "../")
      (find-project-directory-recursive)))

(defun lock-compilation-directory ()
  "The compilation process should NOT hunt for a makefile"
  (interactive)
  (setq compilation-directory-locked t)
  (message "Compilation directory is locked."))

(defun unlock-compilation-directory ()
  "The compilation process SHOULD hunt for a makefile"
  (interactive)
  (setq compilation-directory-locked nil)
  (message "Compilation directory is roaming."))

(defun find-project-directory ()
  "Find the project directory."
  (interactive)
  (setq find-project-from-directory default-directory)
  (switch-to-buffer-other-window "*compilation*")
  (if compilation-directory-locked (cd last-compilation-directory)
  (cd find-project-from-directory)
  (find-project-directory-recursive)
  (setq last-compilation-directory default-directory)))

(defun make-without-asking ()
  "Make the current build."
  (interactive)
  (if (find-project-directory) (compile taguiar-makescript))
  (other-window 1))
(define-key global-map "\em" 'make-without-asking)
